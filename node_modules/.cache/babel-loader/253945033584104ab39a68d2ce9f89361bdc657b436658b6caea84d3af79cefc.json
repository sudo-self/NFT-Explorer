{"ast":null,"code":"const apiKey=\"fIYnOgt3AYXKWnd62G3pu4trdY0fN2iQ\";const endpoint=`https://eth-mainnet.alchemyapi.io/v2/${apiKey}`;/**\n * Fetch NFTs for an owner with optional contract address and pagination.\n * @param {string} owner - Wallet address.\n * @param {string} contractAddress - Optional contract address to filter NFTs.\n * @param {string|null} pageKey - Optional pagination key for next page.\n * @param {number} retryAttempt - Used internally for retry logic.\n * @returns {Promise<{nfts: any[], pageKey: string|null}>} - NFTs and next pageKey.\n */export const fetchNFTs=async function(owner){let contractAddress=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'';let pageKey=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;let retryAttempt=arguments.length>3&&arguments[3]!==undefined?arguments[3]:0;if(retryAttempt>=5){throw new Error('Max retry attempts reached');}if(!owner){return{nfts:[],pageKey:null};}try{let url=`${endpoint}/getNFTs?owner=${owner}`;if(contractAddress){url+=`&contractAddresses%5B%5D=${contractAddress}`;}if(pageKey){url+=`&pageKey=${pageKey}`;}const response=await fetch(url);if(!response.ok){throw new Error(`HTTP error! status: ${response.status}`);}const data=await response.json();return{nfts:data.ownedNfts||[],pageKey:data.pageKey||null};}catch(e){// Retry\nreturn fetchNFTs(owner,contractAddress,pageKey,retryAttempt+1);}};","map":{"version":3,"names":["apiKey","endpoint","fetchNFTs","owner","contractAddress","arguments","length","undefined","pageKey","retryAttempt","Error","nfts","url","response","fetch","ok","status","data","json","ownedNfts","e"],"sources":["/opt/homebrew/var/www/wolf/untitled folder 2/Build-Your-NFT-Explorer/untitled folder/NFT-Explorer/src/utils/fetchNFTs.js"],"sourcesContent":["const apiKey = \"fIYnOgt3AYXKWnd62G3pu4trdY0fN2iQ\";\nconst endpoint = `https://eth-mainnet.alchemyapi.io/v2/${apiKey}`;\n\n/**\n * Fetch NFTs for an owner with optional contract address and pagination.\n * @param {string} owner - Wallet address.\n * @param {string} contractAddress - Optional contract address to filter NFTs.\n * @param {string|null} pageKey - Optional pagination key for next page.\n * @param {number} retryAttempt - Used internally for retry logic.\n * @returns {Promise<{nfts: any[], pageKey: string|null}>} - NFTs and next pageKey.\n */\n\nexport const fetchNFTs = async (owner, contractAddress = '', pageKey = null, retryAttempt = 0) => {\n  if (retryAttempt >= 5) {\n    throw new Error('Max retry attempts reached');\n  }\n  if (!owner) {\n    return { nfts: [], pageKey: null };\n  }\n\n  try {\n    let url = `${endpoint}/getNFTs?owner=${owner}`;\n    if (contractAddress) {\n      url += `&contractAddresses%5B%5D=${contractAddress}`;\n    }\n    if (pageKey) {\n      url += `&pageKey=${pageKey}`;\n    }\n\n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const data = await response.json();\n\n    return {\n      nfts: data.ownedNfts || [],\n      pageKey: data.pageKey || null,\n    };\n  } catch (e) {\n    // Retry\n    return fetchNFTs(owner, contractAddress, pageKey, retryAttempt + 1);\n  }\n};\n"],"mappings":"AAAA,KAAM,CAAAA,MAAM,CAAG,kCAAkC,CACjD,KAAM,CAAAC,QAAQ,CAAG,wCAAwCD,MAAM,EAAE,CAEjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAEA,MAAO,MAAM,CAAAE,SAAS,CAAG,cAAAA,CAAOC,KAAK,CAA6D,IAA3D,CAAAC,eAAe,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,EAAE,IAAE,CAAAG,OAAO,CAAAH,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,IAAI,IAAE,CAAAI,YAAY,CAAAJ,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,CAAC,CAC3F,GAAII,YAAY,EAAI,CAAC,CAAE,CACrB,KAAM,IAAI,CAAAC,KAAK,CAAC,4BAA4B,CAAC,CAC/C,CACA,GAAI,CAACP,KAAK,CAAE,CACV,MAAO,CAAEQ,IAAI,CAAE,EAAE,CAAEH,OAAO,CAAE,IAAK,CAAC,CACpC,CAEA,GAAI,CACF,GAAI,CAAAI,GAAG,CAAG,GAAGX,QAAQ,kBAAkBE,KAAK,EAAE,CAC9C,GAAIC,eAAe,CAAE,CACnBQ,GAAG,EAAI,4BAA4BR,eAAe,EAAE,CACtD,CACA,GAAII,OAAO,CAAE,CACXI,GAAG,EAAI,YAAYJ,OAAO,EAAE,CAC9B,CAEA,KAAM,CAAAK,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAACF,GAAG,CAAC,CACjC,GAAI,CAACC,QAAQ,CAACE,EAAE,CAAE,CAChB,KAAM,IAAI,CAAAL,KAAK,CAAC,uBAAuBG,QAAQ,CAACG,MAAM,EAAE,CAAC,CAC3D,CACA,KAAM,CAAAC,IAAI,CAAG,KAAM,CAAAJ,QAAQ,CAACK,IAAI,CAAC,CAAC,CAElC,MAAO,CACLP,IAAI,CAAEM,IAAI,CAACE,SAAS,EAAI,EAAE,CAC1BX,OAAO,CAAES,IAAI,CAACT,OAAO,EAAI,IAC3B,CAAC,CACH,CAAE,MAAOY,CAAC,CAAE,CACV;AACA,MAAO,CAAAlB,SAAS,CAACC,KAAK,CAAEC,eAAe,CAAEI,OAAO,CAAEC,YAAY,CAAG,CAAC,CAAC,CACrE,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}