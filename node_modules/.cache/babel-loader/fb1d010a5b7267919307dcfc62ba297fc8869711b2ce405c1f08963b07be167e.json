{"ast":null,"code":"import * as React from 'react';\nimport * as THREE from 'three';\nimport { useThree } from '@react-three/fiber';\n\n// From: https://github.com/mrdoob/three.js/blob/dev/examples/webgl_shadowmap_pcss.html\n\nconst pcss = ({\n  frustum = 3.75,\n  size = 0.005,\n  near = 9.5,\n  samples = 10,\n  rings = 11\n} = {}) => `#define LIGHT_WORLD_SIZE ${size}\n#define LIGHT_FRUSTUM_WIDTH ${frustum}\n#define LIGHT_SIZE_UV (LIGHT_WORLD_SIZE / LIGHT_FRUSTUM_WIDTH)\n#define NEAR_PLANE ${near}\n\n#define NUM_SAMPLES ${samples}\n#define NUM_RINGS ${rings}\n#define BLOCKER_SEARCH_NUM_SAMPLES NUM_SAMPLES\n\nvec2 poissonDisk[NUM_SAMPLES];\n\nvoid initPoissonSamples( const in vec2 randomSeed ) {\n  float ANGLE_STEP = PI2 * float( NUM_RINGS ) / float( NUM_SAMPLES );\n  float INV_NUM_SAMPLES = 1.0 / float( NUM_SAMPLES );\n\n  // jsfiddle that shows sample pattern: https://jsfiddle.net/a16ff1p7/\n  float angle = rand( randomSeed ) * PI2;\n  float radius = INV_NUM_SAMPLES;\n  float radiusStep = radius;\n\n  #pragma unroll_loop_start\n  for( int i = 0; i < ${samples}; i ++ ) {\n    poissonDisk[i] = vec2( cos( angle ), sin( angle ) ) * pow( radius, 0.75 );\n    radius += radiusStep;\n    angle += ANGLE_STEP;\n  }\n  #pragma unroll_loop_end\n}\n\nfloat penumbraSize( const in float zReceiver, const in float zBlocker ) { // Parallel plane estimation\n  return (zReceiver - zBlocker) / zBlocker;\n}\n\nfloat findBlocker( sampler2D shadowMap, const in vec2 uv, const in float zReceiver ) {\n  // This uses similar triangles to compute what\n  // area of the shadow map we should search\n  float searchRadius = LIGHT_SIZE_UV * ( zReceiver - NEAR_PLANE ) / zReceiver;\n  float blockerDepthSum = 0.0;\n  float shadowMapDepth = 0.0;\n  int numBlockers = 0;  \n  #pragma unroll_loop_start\n  for( int i = 0; i < ${samples}; i++ ) {\n    shadowMapDepth = unpackRGBAToDepth(texture2D(shadowMap, uv + poissonDisk[i] * searchRadius));\n    if ( shadowMapDepth < zReceiver ) {\n      blockerDepthSum += shadowMapDepth;\n      numBlockers ++;\n    }\n  }\n  #pragma unroll_loop_end\n\n  if( numBlockers == 0 ) return -1.0;\n  return blockerDepthSum / float( numBlockers );\n}\n\nfloat PCF_Filter(sampler2D shadowMap, vec2 uv, float zReceiver, float filterRadius ) {\n  float sum = 0.0;\n  float depth;\n  #pragma unroll_loop_start\n  for( int i = 0; i < ${samples}; i ++ ) {\n    depth = unpackRGBAToDepth( texture2D( shadowMap, uv + poissonDisk[ i ] * filterRadius ) );\n    if( zReceiver <= depth ) sum += 1.0;\n  }\n  #pragma unroll_loop_end\n  #pragma unroll_loop_start\n  for( int i = 0; i < ${samples}; i ++ ) {\n    depth = unpackRGBAToDepth( texture2D( shadowMap, uv + -poissonDisk[ i ].yx * filterRadius ) );\n    if( zReceiver <= depth ) sum += 1.0;\n  }\n  #pragma unroll_loop_end\n  return sum / ( 2.0 * float( ${samples} ) );\n}\n\nfloat PCSS ( sampler2D shadowMap, vec4 coords ) {\n  vec2 uv = coords.xy;\n  float zReceiver = coords.z; // Assumed to be eye-space z in this code\n\n  initPoissonSamples( uv );\n  // STEP 1: blocker search\n  float avgBlockerDepth = findBlocker( shadowMap, uv, zReceiver );\n\n  //There are no occluders so early out (this saves filtering)\n  if( avgBlockerDepth == -1.0 ) return 1.0;\n\n  // STEP 2: penumbra size\n  float penumbraRatio = penumbraSize( zReceiver, avgBlockerDepth );\n  float filterRadius = penumbraRatio * LIGHT_SIZE_UV * NEAR_PLANE / zReceiver;\n\n  // STEP 3: filtering\n  //return avgBlockerDepth;\n  return PCF_Filter( shadowMap, uv, zReceiver, filterRadius );\n}`;\nlet deployed = false;\nconst softShadows = props => {\n  // Avoid adding the effect twice, which may happen in HMR scenarios\n  if (!deployed) {\n    console.warn('drei/softShadows() is deprecated, use <SoftShadows> instead');\n    deployed = true;\n    let shader = THREE.ShaderChunk.shadowmap_pars_fragment;\n    shader = shader.replace('#ifdef USE_SHADOWMAP', '#ifdef USE_SHADOWMAP\\n' + pcss({\n      ...props\n    }));\n    shader = shader.replace('#if defined( SHADOWMAP_TYPE_PCF )', '\\nreturn PCSS(shadowMap, shadowCoord);\\n#if defined( SHADOWMAP_TYPE_PCF )');\n    THREE.ShaderChunk.shadowmap_pars_fragment = shader;\n  }\n};\nfunction reset(gl, scene, camera) {\n  scene.traverse(object => {\n    if (object.material) {\n      gl.properties.remove(object.material);\n      object.material.dispose();\n    }\n  });\n  gl.info.programs.length = 0;\n  gl.compile(scene, camera);\n}\nfunction SoftShadows({\n  frustum = 3.75,\n  size = 0.005,\n  near = 9.5,\n  samples = 10,\n  rings = 11\n}) {\n  const gl = useThree(state => state.gl);\n  const scene = useThree(state => state.scene);\n  const camera = useThree(state => state.camera);\n  React.useEffect(() => {\n    const original = THREE.ShaderChunk.shadowmap_pars_fragment;\n    let shader = THREE.ShaderChunk.shadowmap_pars_fragment;\n    shader = shader.replace('#ifdef USE_SHADOWMAP', '#ifdef USE_SHADOWMAP\\n' + pcss({\n      frustum,\n      size,\n      near,\n      samples,\n      rings\n    }));\n    shader = shader.replace('#if defined( SHADOWMAP_TYPE_PCF )', '\\nreturn PCSS(shadowMap, shadowCoord);\\n#if defined( SHADOWMAP_TYPE_PCF )');\n    THREE.ShaderChunk.shadowmap_pars_fragment = shader;\n    reset(gl, scene, camera);\n    return () => {\n      THREE.ShaderChunk.shadowmap_pars_fragment = original;\n      reset(gl, scene, camera);\n    };\n  }, [frustum, size, near, samples, rings]);\n}\nexport { SoftShadows, softShadows };","map":{"version":3,"names":["React","THREE","useThree","pcss","frustum","size","near","samples","rings","deployed","softShadows","props","console","warn","shader","ShaderChunk","shadowmap_pars_fragment","replace","reset","gl","scene","camera","traverse","object","material","properties","remove","dispose","info","programs","length","compile","SoftShadows","state","useEffect","original"],"sources":["/opt/homebrew/var/www/wolf/untitled folder 2/Build-Your-NFT-Explorer/untitled folder/NFT-Explorer/node_modules/.pnpm/@react-three+drei@9.56.3_@react-three+fiber@8.13.7_react-dom@18.2.0_react@18.2.0__react_688f462e0126437578f3a3e576b5206a/node_modules/@react-three/drei/core/softShadows.js"],"sourcesContent":["import * as React from 'react';\nimport * as THREE from 'three';\nimport { useThree } from '@react-three/fiber';\n\n// From: https://github.com/mrdoob/three.js/blob/dev/examples/webgl_shadowmap_pcss.html\n\nconst pcss = ({\n  frustum = 3.75,\n  size = 0.005,\n  near = 9.5,\n  samples = 10,\n  rings = 11\n} = {}) => `#define LIGHT_WORLD_SIZE ${size}\n#define LIGHT_FRUSTUM_WIDTH ${frustum}\n#define LIGHT_SIZE_UV (LIGHT_WORLD_SIZE / LIGHT_FRUSTUM_WIDTH)\n#define NEAR_PLANE ${near}\n\n#define NUM_SAMPLES ${samples}\n#define NUM_RINGS ${rings}\n#define BLOCKER_SEARCH_NUM_SAMPLES NUM_SAMPLES\n\nvec2 poissonDisk[NUM_SAMPLES];\n\nvoid initPoissonSamples( const in vec2 randomSeed ) {\n  float ANGLE_STEP = PI2 * float( NUM_RINGS ) / float( NUM_SAMPLES );\n  float INV_NUM_SAMPLES = 1.0 / float( NUM_SAMPLES );\n\n  // jsfiddle that shows sample pattern: https://jsfiddle.net/a16ff1p7/\n  float angle = rand( randomSeed ) * PI2;\n  float radius = INV_NUM_SAMPLES;\n  float radiusStep = radius;\n\n  #pragma unroll_loop_start\n  for( int i = 0; i < ${samples}; i ++ ) {\n    poissonDisk[i] = vec2( cos( angle ), sin( angle ) ) * pow( radius, 0.75 );\n    radius += radiusStep;\n    angle += ANGLE_STEP;\n  }\n  #pragma unroll_loop_end\n}\n\nfloat penumbraSize( const in float zReceiver, const in float zBlocker ) { // Parallel plane estimation\n  return (zReceiver - zBlocker) / zBlocker;\n}\n\nfloat findBlocker( sampler2D shadowMap, const in vec2 uv, const in float zReceiver ) {\n  // This uses similar triangles to compute what\n  // area of the shadow map we should search\n  float searchRadius = LIGHT_SIZE_UV * ( zReceiver - NEAR_PLANE ) / zReceiver;\n  float blockerDepthSum = 0.0;\n  float shadowMapDepth = 0.0;\n  int numBlockers = 0;  \n  #pragma unroll_loop_start\n  for( int i = 0; i < ${samples}; i++ ) {\n    shadowMapDepth = unpackRGBAToDepth(texture2D(shadowMap, uv + poissonDisk[i] * searchRadius));\n    if ( shadowMapDepth < zReceiver ) {\n      blockerDepthSum += shadowMapDepth;\n      numBlockers ++;\n    }\n  }\n  #pragma unroll_loop_end\n\n  if( numBlockers == 0 ) return -1.0;\n  return blockerDepthSum / float( numBlockers );\n}\n\nfloat PCF_Filter(sampler2D shadowMap, vec2 uv, float zReceiver, float filterRadius ) {\n  float sum = 0.0;\n  float depth;\n  #pragma unroll_loop_start\n  for( int i = 0; i < ${samples}; i ++ ) {\n    depth = unpackRGBAToDepth( texture2D( shadowMap, uv + poissonDisk[ i ] * filterRadius ) );\n    if( zReceiver <= depth ) sum += 1.0;\n  }\n  #pragma unroll_loop_end\n  #pragma unroll_loop_start\n  for( int i = 0; i < ${samples}; i ++ ) {\n    depth = unpackRGBAToDepth( texture2D( shadowMap, uv + -poissonDisk[ i ].yx * filterRadius ) );\n    if( zReceiver <= depth ) sum += 1.0;\n  }\n  #pragma unroll_loop_end\n  return sum / ( 2.0 * float( ${samples} ) );\n}\n\nfloat PCSS ( sampler2D shadowMap, vec4 coords ) {\n  vec2 uv = coords.xy;\n  float zReceiver = coords.z; // Assumed to be eye-space z in this code\n\n  initPoissonSamples( uv );\n  // STEP 1: blocker search\n  float avgBlockerDepth = findBlocker( shadowMap, uv, zReceiver );\n\n  //There are no occluders so early out (this saves filtering)\n  if( avgBlockerDepth == -1.0 ) return 1.0;\n\n  // STEP 2: penumbra size\n  float penumbraRatio = penumbraSize( zReceiver, avgBlockerDepth );\n  float filterRadius = penumbraRatio * LIGHT_SIZE_UV * NEAR_PLANE / zReceiver;\n\n  // STEP 3: filtering\n  //return avgBlockerDepth;\n  return PCF_Filter( shadowMap, uv, zReceiver, filterRadius );\n}`;\n\nlet deployed = false;\nconst softShadows = props => {\n  // Avoid adding the effect twice, which may happen in HMR scenarios\n  if (!deployed) {\n    console.warn('drei/softShadows() is deprecated, use <SoftShadows> instead');\n    deployed = true;\n    let shader = THREE.ShaderChunk.shadowmap_pars_fragment;\n    shader = shader.replace('#ifdef USE_SHADOWMAP', '#ifdef USE_SHADOWMAP\\n' + pcss({ ...props\n    }));\n    shader = shader.replace('#if defined( SHADOWMAP_TYPE_PCF )', '\\nreturn PCSS(shadowMap, shadowCoord);\\n#if defined( SHADOWMAP_TYPE_PCF )');\n    THREE.ShaderChunk.shadowmap_pars_fragment = shader;\n  }\n};\n\nfunction reset(gl, scene, camera) {\n  scene.traverse(object => {\n    if (object.material) {\n      gl.properties.remove(object.material);\n      object.material.dispose();\n    }\n  });\n  gl.info.programs.length = 0;\n  gl.compile(scene, camera);\n}\n\nfunction SoftShadows({\n  frustum = 3.75,\n  size = 0.005,\n  near = 9.5,\n  samples = 10,\n  rings = 11\n}) {\n  const gl = useThree(state => state.gl);\n  const scene = useThree(state => state.scene);\n  const camera = useThree(state => state.camera);\n  React.useEffect(() => {\n    const original = THREE.ShaderChunk.shadowmap_pars_fragment;\n    let shader = THREE.ShaderChunk.shadowmap_pars_fragment;\n    shader = shader.replace('#ifdef USE_SHADOWMAP', '#ifdef USE_SHADOWMAP\\n' + pcss({\n      frustum,\n      size,\n      near,\n      samples,\n      rings\n    }));\n    shader = shader.replace('#if defined( SHADOWMAP_TYPE_PCF )', '\\nreturn PCSS(shadowMap, shadowCoord);\\n#if defined( SHADOWMAP_TYPE_PCF )');\n    THREE.ShaderChunk.shadowmap_pars_fragment = shader;\n    reset(gl, scene, camera);\n    return () => {\n      THREE.ShaderChunk.shadowmap_pars_fragment = original;\n      reset(gl, scene, camera);\n    };\n  }, [frustum, size, near, samples, rings]);\n}\n\nexport { SoftShadows, softShadows };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}