{"ast":null,"code":"const apiKey = \"fIYnOgt3AYXKWnd62G3pu4trdY0fN2iQ\";\nconst endpoint = `https://eth-mainnet.alchemyapi.io/v2/${apiKey}`;\n\n/**\n * Fetch NFTs for an owner with optional contract address and pagination.\n * @param {string} owner - Wallet address.\n * @param {string} contractAddress - Optional contract address to filter NFTs.\n * @param {string|null} pageKey - Optional pagination key for next page.\n * @param {number} retryAttempt - Used internally for retry logic.\n * @returns {Promise<{nfts: any[], pageKey: string|null}>} - NFTs and next pageKey.\n */\n\nexport const fetchNFTs = async (owner, contractAddress = '', pageKey = null, retryAttempt = 0) => {\n  if (retryAttempt >= 5) {\n    throw new Error('Max retry attempts reached');\n  }\n  if (!owner) {\n    return {\n      nfts: [],\n      pageKey: null\n    };\n  }\n  try {\n    let url = `${endpoint}/getNFTs?owner=${owner}`;\n    if (contractAddress) {\n      url += `&contractAddresses%5B%5D=${contractAddress}`;\n    }\n    if (pageKey) {\n      url += `&pageKey=${pageKey}`;\n    }\n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const data = await response.json();\n    return {\n      nfts: data.ownedNfts || [],\n      pageKey: data.pageKey || null\n    };\n  } catch (e) {\n    // Retry\n    return fetchNFTs(owner, contractAddress, pageKey, retryAttempt + 1);\n  }\n};","map":{"version":3,"names":["apiKey","endpoint","fetchNFTs","owner","contractAddress","pageKey","retryAttempt","Error","nfts","url","response","fetch","ok","status","data","json","ownedNfts","e"],"sources":["/opt/homebrew/var/www/wolf/untitled folder 2/Build-Your-NFT-Explorer/untitled folder/NFT-Explorer/src/utils/fetchNFTs.js"],"sourcesContent":["const apiKey = \"fIYnOgt3AYXKWnd62G3pu4trdY0fN2iQ\";\nconst endpoint = `https://eth-mainnet.alchemyapi.io/v2/${apiKey}`;\n\n/**\n * Fetch NFTs for an owner with optional contract address and pagination.\n * @param {string} owner - Wallet address.\n * @param {string} contractAddress - Optional contract address to filter NFTs.\n * @param {string|null} pageKey - Optional pagination key for next page.\n * @param {number} retryAttempt - Used internally for retry logic.\n * @returns {Promise<{nfts: any[], pageKey: string|null}>} - NFTs and next pageKey.\n */\n\nexport const fetchNFTs = async (owner, contractAddress = '', pageKey = null, retryAttempt = 0) => {\n  if (retryAttempt >= 5) {\n    throw new Error('Max retry attempts reached');\n  }\n  if (!owner) {\n    return { nfts: [], pageKey: null };\n  }\n\n  try {\n    let url = `${endpoint}/getNFTs?owner=${owner}`;\n    if (contractAddress) {\n      url += `&contractAddresses%5B%5D=${contractAddress}`;\n    }\n    if (pageKey) {\n      url += `&pageKey=${pageKey}`;\n    }\n\n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const data = await response.json();\n\n    return {\n      nfts: data.ownedNfts || [],\n      pageKey: data.pageKey || null,\n    };\n  } catch (e) {\n    // Retry\n    return fetchNFTs(owner, contractAddress, pageKey, retryAttempt + 1);\n  }\n};\n"],"mappings":"AAAA,MAAMA,MAAM,GAAG,kCAAkC;AACjD,MAAMC,QAAQ,GAAG,wCAAwCD,MAAM,EAAE;;AAEjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAME,SAAS,GAAG,MAAAA,CAAOC,KAAK,EAAEC,eAAe,GAAG,EAAE,EAAEC,OAAO,GAAG,IAAI,EAAEC,YAAY,GAAG,CAAC,KAAK;EAChG,IAAIA,YAAY,IAAI,CAAC,EAAE;IACrB,MAAM,IAAIC,KAAK,CAAC,4BAA4B,CAAC;EAC/C;EACA,IAAI,CAACJ,KAAK,EAAE;IACV,OAAO;MAAEK,IAAI,EAAE,EAAE;MAAEH,OAAO,EAAE;IAAK,CAAC;EACpC;EAEA,IAAI;IACF,IAAII,GAAG,GAAG,GAAGR,QAAQ,kBAAkBE,KAAK,EAAE;IAC9C,IAAIC,eAAe,EAAE;MACnBK,GAAG,IAAI,4BAA4BL,eAAe,EAAE;IACtD;IACA,IAAIC,OAAO,EAAE;MACXI,GAAG,IAAI,YAAYJ,OAAO,EAAE;IAC9B;IAEA,MAAMK,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAG,CAAC;IACjC,IAAI,CAACC,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIL,KAAK,CAAC,uBAAuBG,QAAQ,CAACG,MAAM,EAAE,CAAC;IAC3D;IACA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;IAElC,OAAO;MACLP,IAAI,EAAEM,IAAI,CAACE,SAAS,IAAI,EAAE;MAC1BX,OAAO,EAAES,IAAI,CAACT,OAAO,IAAI;IAC3B,CAAC;EACH,CAAC,CAAC,OAAOY,CAAC,EAAE;IACV;IACA,OAAOf,SAAS,CAACC,KAAK,EAAEC,eAAe,EAAEC,OAAO,EAAEC,YAAY,GAAG,CAAC,CAAC;EACrE;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}